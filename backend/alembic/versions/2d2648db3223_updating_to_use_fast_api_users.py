"""Updating to use fast-api users

Revision ID: 2d2648db3223
Revises: a819ccb557c1
Create Date: 2023-09-03 10:20:24.205972

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = '2d2648db3223'
down_revision: Union[str, None] = 'a819ccb557c1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade_old() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('quiz_attempt_user_id_fkey', 'quiz_attempt', type_='foreignkey')
    op.create_foreign_key(None, 'quiz_attempt', 'user', ['user_id'], ['id'])
    op.drop_constraint('slot_user_id_fkey', 'slot', type_='foreignkey')
    op.create_foreign_key(None, 'slot', 'user', ['user_id'], ['id'])
    op.add_column('user', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('user', sa.Column('role', sa.Enum('ADMIN', 'NORMAL', 'ADVISOR', name='userrole'), nullable=False))
    op.add_column('user', sa.Column('email', sa.String(length=320), nullable=False))
    op.add_column('user', sa.Column('hashed_password', sa.String(length=1024), nullable=False))
    op.add_column('user', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('user', sa.Column('is_superuser', sa.Boolean(), nullable=False))
    op.add_column('user', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.drop_column('user', 'username')
    op.drop_column('user', 'salt')
    op.drop_column('user', 'uid')
    op.drop_column('user', 'password_hash')
    # ### end Alembic commands ###


def upgrade() -> None:
    # 1. Add the `id` column as nullable
    op.add_column('user', sa.Column('id', sa.Integer()))

    # 2. Copy values from `uid` to `id`
    op.execute('UPDATE "user" SET id = uid')

    # 3. Alter the `id` column to be non-nullable
    op.alter_column('user', 'id', nullable=False)

    # 4. Create the `userrole` enumerated type
    userrole_enum = sa.Enum('ADMIN', 'NORMAL', 'ADVISOR', name='userrole')
    userrole_enum.create(op.get_bind(), checkfirst=False)

    # 5. Add the `role` column as nullable
    op.add_column('user', sa.Column('role', userrole_enum))

    # 6. Set a default value for the `role` column for all existing rows
    op.execute('UPDATE "user" SET role = \'NORMAL\'')  # Assuming 'NORMAL' as the default role

    # 7. Alter the `role` column to be non-nullable
    op.alter_column('user', 'role', nullable=False)

    # Updating primary key for user table
    op.drop_constraint('user_pkey', 'user', type_='primary')
    op.create_primary_key('user_pkey', 'user', ['id'])

    # Add the `email` column as nullable
    op.add_column('user', sa.Column('email', sa.String(length=320)))
    # Use SQL to set an incremental placeholder for the email
    op.execute('UPDATE "user" SET email = \'placeholder\' || id || \'@example.com\'')
    # Alter the `email` column to be non-nullable
    op.alter_column('user', 'email', nullable=False)

    # Repeat the same process for `hashed_password`
    op.add_column('user', sa.Column('hashed_password', sa.String(length=1024)))
    op.execute('UPDATE "user" SET hashed_password = \'placeholder_hash\'')
    op.alter_column('user', 'hashed_password', nullable=False)

    # For boolean columns
    op.add_column('user', sa.Column('is_active', sa.Boolean()))
    op.execute('UPDATE "user" SET is_active = True')
    op.alter_column('user', 'is_active', nullable=False)

    op.add_column('user', sa.Column('is_superuser', sa.Boolean()))
    op.execute('UPDATE "user" SET is_superuser = False')
    op.alter_column('user', 'is_superuser', nullable=False)

    op.add_column('user', sa.Column('is_verified', sa.Boolean()))
    op.execute('UPDATE "user" SET is_verified = False')
    op.alter_column('user', 'is_verified', nullable=False)

    # Other operations from your original script
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)

    # Now, create the foreign key constraints
    op.drop_constraint('quiz_attempt_user_id_fkey', 'quiz_attempt', type_='foreignkey')
    op.create_foreign_key(None, 'quiz_attempt', 'user', ['user_id'], ['id'])
    op.drop_constraint('slot_user_id_fkey', 'slot', type_='foreignkey')
    op.create_foreign_key(None, 'slot', 'user', ['user_id'], ['id'])

    # Drop the old columns and the `uid` column
    op.drop_column('user', 'username')
    op.drop_column('user', 'salt')
    op.drop_column('user', 'password_hash')
    op.drop_column('user', 'uid')


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('uid', sa.INTEGER(), server_default=sa.text("nextval('user_uid_seq'::regclass)"),
                                    autoincrement=True, nullable=False))
    op.add_column('user', sa.Column('salt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_column('user', 'is_verified')
    op.drop_column('user', 'is_superuser')
    op.drop_column('user', 'is_active')
    op.drop_column('user', 'hashed_password')
    op.drop_column('user', 'email')
    op.drop_column('user', 'role')
    op.drop_column('user', 'id')
    op.drop_constraint(None, 'slot', type_='foreignkey')
    op.create_foreign_key('slot_user_id_fkey', 'slot', 'user', ['user_id'], ['uid'])
    op.drop_constraint(None, 'quiz_attempt', type_='foreignkey')
    op.create_foreign_key('quiz_attempt_user_id_fkey', 'quiz_attempt', 'user', ['user_id'], ['uid'])
    # ### end Alembic commands ###
